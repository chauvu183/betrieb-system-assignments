#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>
#include <stdlib.h>
#include <wait.h>

#define PATH_SIZE 255
#define COMMAND_SIZE 255
#define MAX_ARGS 63

void init_shell(){
  char path[PATH_SIZE];

  getcwd(path,sizeof(path));

  char *user = getenv("USER");

  printf("%s - Was willst du, %s ?",path,user);
}

//split the input into an array of char pointers
// Each pointer shall point to a string containing a parameter:
int readCommand(char *input){
  //prompt
  fgets(input, COMMAND_SIZE, stdin); 
  //remove the line break, swap it with 0 
	input[sizeof(input)-1] = 0; // 
	// when the last letter is &, then it 	will 
	if(input[sizeof(input)-1] == '&'){ // Wenn das letzte Zeichen ein & ist, meldet sich die Shell sofort zur√ºck
		input[sizeof(input)-1] = 0;    
		return 1;
	} else {
	return 0;
        }
}

int main(void){
  char input[COMMAND_SIZE];
  int PIDstatus;
  int status;
  while(1){
    init_shell();
    char command = readCommand(input);

    if(strcmp(input,"help")==0){
      printf("quit - end HAW-Shell\n");
			printf("version - give the version of HAW-Shell\n");
			printf("/[Pfadname] - change the current directory of the file \n");
			printf("help - description of the commands\n");}

      if(strcmp(input,"version") == 0){
				printf("HAW-Shell has version 10\n");}

      if(strcmp(input,"quit")==0){
        printf("..and tschuss");
        return 0;}

      if(strncmp(input,"/n",1) == 0){
        chdir(&command);

      }else{
        //fork child and execute program

        //create a child process run parral
        PIDstatus = fork();
        if(PIDstatus < 0 ){
          // Conditions is not succesfull
            printf("fork cant be executed");
            continue;
        }
        if( PIDstatus > 0){
          //
          waitpid(PIDstatus,&status,0);
        }else{
          // if PID is 0
          // execute the kind process
          execlp(command, command, NULL);
        }
      }
  }
  return 0;
}